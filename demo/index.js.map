{
  "version": 3,
  "sources": ["../../../src/webauthn-json/basic/supported.ts", "../../../src/dev/demo/index.ts"],
  "sourcesContent": ["// This function does a simple check to test for the credential management API\n// functions we need, and an indication of public key credential authentication\n// support.\n// https://developers.google.com/web/updates/2018/03/webauthn-credential-management\n\nexport function supported(): boolean {\n  return !!(\n    navigator.credentials &&\n    navigator.credentials.create &&\n    navigator.credentials.get &&\n    window.PublicKeyCredential\n  );\n}\n", "// A minimal example to test `webauthn-json`.\n// Note: do not hardcode values in production.\n\nimport { PublicKeyCredentialDescriptorJSON } from \"../../webauthn-json/basic/json\";\nimport { create, get, supported } from \"../../webauthn-json\";\nimport {\n  getRegistrations,\n  saveRegistration,\n  setRegistrations,\n  withStatus,\n} from \"./state\";\n\nfunction registeredCredentials(): PublicKeyCredentialDescriptorJSON[] {\n  return getRegistrations().map((reg) => ({\n    id: reg.rawId,\n    type: reg.type,\n  }));\n}\n\nasync function register(): Promise<void> {\n  saveRegistration(\n    await create({\n      publicKey: {\n        challenge: \"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\",\n        rp: { name: \"Localhost, Inc.\" },\n        user: {\n          id: \"IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\",\n          name: \"test_user\",\n          displayName: \"Test User\",\n        },\n        pubKeyCredParams: [{ type: \"public-key\", alg: -7 }],\n        excludeCredentials: registeredCredentials(),\n        authenticatorSelection: { userVerification: \"discouraged\" },\n        extensions: {\n          credProps: true,\n        },\n      },\n    }),\n  );\n}\n\nasync function authenticate(): Promise<void> {\n  await get({\n    publicKey: {\n      challenge: \"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\",\n      allowCredentials: registeredCredentials(),\n      userVerification: \"discouraged\",\n    },\n  });\n}\n\nasync function clear(): Promise<void> {\n  setRegistrations([]);\n}\n\nasync function testSupported() {\n  document.querySelector(\"#supported .status\")!.textContent = \"\u2026\";\n  document.querySelector(\"#supported .status\")!.textContent = supported()\n    ? \" \u2705\"\n    : \" \u274C\";\n}\n\nwindow.addEventListener(\"load\", () => {\n  try {\n    document\n      .querySelector(\"#register\")!\n      .addEventListener(\"click\", withStatus(\"#register .status\", register));\n    document\n      .querySelector(\"#authenticate\")!\n      .addEventListener(\n        \"click\",\n        withStatus(\"#authenticate .status\", authenticate),\n      );\n    document\n      .querySelector(\"#clear\")!\n      .addEventListener(\"click\", withStatus(\"#clear .status\", clear));\n    document\n      .querySelector(\"#supported\")!\n      .addEventListener(\"click\", testSupported);\n  } catch (e) {\n    console.error(e);\n  }\n});\n"],
  "mappings": "yGAKO,YAA8B,CACnC,MAAO,CAAC,CACN,WAAU,aACV,UAAU,YAAY,QACtB,UAAU,YAAY,KACtB,OAAO,qBCEX,YAAsE,CACpE,MAAO,KAAmB,IAAI,AAAC,GAAS,EACtC,GAAI,EAAI,MACR,KAAM,EAAI,QAId,kBAAyC,CACvC,EACE,KAAM,GAAO,CACX,UAAW,CACT,UAAW,8CACX,GAAI,CAAE,KAAM,mBACZ,KAAM,CACJ,GAAI,8CACJ,KAAM,YACN,YAAa,aAEf,iBAAkB,CAAC,CAAE,KAAM,aAAc,IAAK,KAC9C,mBAAoB,IACpB,uBAAwB,CAAE,iBAAkB,eAC5C,WAAY,CACV,UAAW,QAOrB,kBAA6C,CAC3C,KAAM,GAAI,CACR,UAAW,CACT,UAAW,8CACX,iBAAkB,IAClB,iBAAkB,iBAKxB,kBAAsC,CACpC,EAAiB,IAGnB,kBAA+B,CAC7B,SAAS,cAAc,sBAAuB,YAAc,SAC5D,SAAS,cAAc,sBAAuB,YAAc,IACxD,UACA,UAGN,OAAO,iBAAiB,OAAQ,IAAM,CACpC,GAAI,CACF,SACG,cAAc,aACd,iBAAiB,QAAS,EAAW,oBAAqB,IAC7D,SACG,cAAc,iBACd,iBACC,QACA,EAAW,wBAAyB,IAExC,SACG,cAAc,UACd,iBAAiB,QAAS,EAAW,iBAAkB,IAC1D,SACG,cAAc,cACd,iBAAiB,QAAS,SACtB,EAAP,CACA,QAAQ,MAAM",
  "names": []
}
