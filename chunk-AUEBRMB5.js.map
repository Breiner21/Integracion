{
  "version": 3,
  "sources": ["../../src/webauthn-json/base64url.ts", "../../src/webauthn-json/convert.ts", "../../src/webauthn-json/basic/schema.ts", "../../src/webauthn-json/basic/api.ts"],
  "sourcesContent": ["export type Base64urlString = string;\n\nexport function base64urlToBuffer(\n  baseurl64String: Base64urlString,\n): ArrayBuffer {\n  // Base64url to Base64\n  const padding = \"==\".slice(0, (4 - (baseurl64String.length % 4)) % 4);\n  const base64String =\n    baseurl64String.replace(/-/g, \"+\").replace(/_/g, \"/\") + padding;\n\n  // Base64 to binary string\n  const str = atob(base64String);\n\n  // Binary string to buffer\n  const buffer = new ArrayBuffer(str.length);\n  const byteView = new Uint8Array(buffer);\n  for (let i = 0; i < str.length; i++) {\n    byteView[i] = str.charCodeAt(i);\n  }\n  return buffer;\n}\n\nexport function bufferToBase64url(buffer: ArrayBuffer): Base64urlString {\n  // Buffer to binary string\n  const byteView = new Uint8Array(buffer);\n  let str = \"\";\n  for (const charCode of byteView) {\n    str += String.fromCharCode(charCode);\n  }\n\n  // Binary string to base64\n  const base64String = btoa(str);\n\n  // Base64 to base64url\n  // We assume that the base64url string is well-formed.\n  const base64urlString = base64String\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=/g, \"\");\n  return base64urlString;\n}\n", "// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n\nimport { Schema, SchemaProperty } from \"./schema-format\";\n\n// TODO: Parcel isn't deduplicating these values.\nexport const copyValue = \"copy\";\nexport const convertValue = \"convert\";\n\nexport function convert<From, To>(\n  conversionFn: (v: From) => To,\n  schema: Schema,\n  input: any,\n): any {\n  if (schema === copyValue) {\n    return input;\n  }\n  if (schema === convertValue) {\n    return conversionFn(input);\n  }\n  if (schema instanceof Array) {\n    return input.map((v: any) => convert<From, To>(conversionFn, schema[0], v));\n  }\n  if (schema instanceof Object) {\n    const output: any = {};\n    for (const [key, schemaField] of Object.entries(schema)) {\n      if (schemaField.derive) {\n        const v = schemaField.derive(input);\n        if (v !== undefined) {\n          input[key] = v;\n        }\n      }\n\n      if (!(key in input)) {\n        if (schemaField.required) {\n          throw new Error(`Missing key: ${key}`);\n        }\n        continue;\n      }\n      // Fields can be null (rather than missing or `undefined`), e.g. the\n      // `userHandle` field of the `AuthenticatorAssertionResponse`:\n      // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n      if (input[key] == null) {\n        output[key] = null;\n        continue;\n      }\n      output[key] = convert<From, To>(\n        conversionFn,\n        schemaField.schema,\n        input[key],\n      );\n    }\n    return output;\n  }\n}\n\nexport function derived(\n  schema: Schema,\n  derive: (v: any) => any,\n): SchemaProperty {\n  return {\n    required: true,\n    schema,\n    derive,\n  };\n}\n\nexport function required(schema: Schema): SchemaProperty {\n  return {\n    required: true,\n    schema,\n  };\n}\n\nexport function optional(schema: Schema): SchemaProperty {\n  return {\n    required: false,\n    schema,\n  };\n}\n", "import { Schema } from \"../schema-format\";\nimport {\n  convertValue as convert,\n  copyValue as copy,\n  derived,\n  optional,\n  required,\n} from \"../convert\";\n\n// Shared by `create()` and `get()`.\n\nconst publicKeyCredentialDescriptorSchema: Schema = {\n  type: required(copy),\n  id: required(convert),\n  transports: optional(copy),\n};\n\nconst simplifiedExtensionsSchema: Schema = {\n  appid: optional(copy),\n  appidExclude: optional(copy),\n  credProps: optional(copy),\n};\n\nconst simplifiedClientExtensionResultsSchema = {\n  appid: optional(copy),\n  appidExclude: optional(copy),\n  credProps: optional(copy),\n};\n\n// `navigator.create()` request\n\nexport const credentialCreationOptions: Schema = {\n  publicKey: required({\n    rp: required(copy),\n    user: required({\n      id: required(convert),\n      name: required(copy),\n      displayName: required(copy),\n    }),\n\n    challenge: required(convert),\n    pubKeyCredParams: required(copy),\n\n    timeout: optional(copy),\n    excludeCredentials: optional([publicKeyCredentialDescriptorSchema]),\n    authenticatorSelection: optional(copy),\n    attestation: optional(copy),\n    extensions: optional(simplifiedExtensionsSchema),\n  }),\n  signal: optional(copy),\n};\n\n// `navigator.create()` response\n\nexport const publicKeyCredentialWithAttestation: Schema = {\n  type: required(copy),\n  id: required(copy),\n  rawId: required(convert),\n  authenticatorAttachment: optional(copy),\n  response: required({\n    clientDataJSON: required(convert),\n    attestationObject: required(convert),\n    transports: derived(\n      copy,\n      (response: any) => response.getTransports?.() || [],\n    ),\n  }),\n  clientExtensionResults: derived(\n    simplifiedClientExtensionResultsSchema,\n    (pkc: PublicKeyCredential) => pkc.getClientExtensionResults(),\n  ),\n};\n\n// `navigator.get()` request\n\nexport const credentialRequestOptions: Schema = {\n  mediation: optional(copy),\n  publicKey: required({\n    challenge: required(convert),\n    timeout: optional(copy),\n    rpId: optional(copy),\n    allowCredentials: optional([publicKeyCredentialDescriptorSchema]),\n    userVerification: optional(copy),\n    extensions: optional(simplifiedExtensionsSchema),\n  }),\n  signal: optional(copy),\n};\n\n// `navigator.get()` response\n\nexport const publicKeyCredentialWithAssertion: Schema = {\n  type: required(copy),\n  id: required(copy),\n  rawId: required(convert),\n  authenticatorAttachment: optional(copy),\n  response: required({\n    clientDataJSON: required(convert),\n    authenticatorData: required(convert),\n    signature: required(convert),\n    userHandle: required(convert),\n  }),\n  clientExtensionResults: derived(\n    simplifiedClientExtensionResultsSchema,\n    (pkc: PublicKeyCredential) => pkc.getClientExtensionResults(),\n  ),\n};\n\nexport const schema: { [s: string]: Schema } = {\n  credentialCreationOptions,\n  publicKeyCredentialWithAttestation,\n  credentialRequestOptions,\n  publicKeyCredentialWithAssertion,\n};\n", "import { base64urlToBuffer, bufferToBase64url } from \"../base64url\";\nimport { convert } from \"../convert\";\nimport {\n  CredentialCreationOptionsJSON,\n  CredentialRequestOptionsJSON,\n  PublicKeyCredentialWithAssertionJSON,\n  PublicKeyCredentialWithAttestationJSON,\n} from \"./json\";\nimport {\n  credentialCreationOptions,\n  credentialRequestOptions,\n  publicKeyCredentialWithAssertion,\n  publicKeyCredentialWithAttestation,\n} from \"./schema\";\n\nexport function createRequestFromJSON(\n  requestJSON: CredentialCreationOptionsJSON,\n): CredentialCreationOptions {\n  return convert(base64urlToBuffer, credentialCreationOptions, requestJSON);\n}\n\nexport function createResponseToJSON(\n  credential: PublicKeyCredential,\n): PublicKeyCredentialWithAttestationJSON {\n  return convert(\n    bufferToBase64url,\n    publicKeyCredentialWithAttestation,\n    credential,\n  );\n}\n\nexport async function create(\n  requestJSON: CredentialCreationOptionsJSON,\n): Promise<PublicKeyCredentialWithAttestationJSON> {\n  const credential = (await navigator.credentials.create(\n    createRequestFromJSON(requestJSON),\n  )) as PublicKeyCredential;\n  return createResponseToJSON(credential);\n}\n\nexport function getRequestFromJSON(\n  requestJSON: CredentialRequestOptionsJSON,\n): CredentialRequestOptions {\n  return convert(base64urlToBuffer, credentialRequestOptions, requestJSON);\n}\n\nexport function getResponseToJSON(\n  credential: PublicKeyCredential,\n): PublicKeyCredentialWithAssertionJSON {\n  return convert(\n    bufferToBase64url,\n    publicKeyCredentialWithAssertion,\n    credential,\n  );\n}\n\nexport async function get(\n  requestJSON: CredentialRequestOptionsJSON,\n): Promise<PublicKeyCredentialWithAssertionJSON> {\n  const credential = (await navigator.credentials.get(\n    getRequestFromJSON(requestJSON),\n  )) as PublicKeyCredential;\n  return getResponseToJSON(credential);\n}\n\ndeclare global {\n  interface Window {\n    PublicKeyCredential: PublicKeyCredential | undefined;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
